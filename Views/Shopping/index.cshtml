@model Core.Models.Order
@using Core.Models
@using System.Linq
@using Core

@{
    ViewData["Title"] = "Shopping";
}

<h2>@ViewData["Title"]</h2>
<h3>Your current delivery addresss is: @ViewData["DeliveryAddress"]</h3>
If you would like just this order deliverd to a differnt location verify a different address for instant delivery.  The address in this box will be delivered to.
If you wouldlike to try your current GPS location please click here <input type=button class=btn btn-default value="Use My Current Location" onclick="getLocation()"></input>  
<hr/>
<div class=container>
    <div class="row">
        <div class="col-xs-5">
            <div class="form-group">
                <label asp-for="GeocodedAddress" class="col-md-2 control-label"></label>
                <div class="col-md-10">
                <div id='searchBoxContainer'> 
                    <input id='GeocodedAddress' type=text  asp-for="GeocodedAddress" value="@ViewData["DeliveryAddress"]" class="form-control" />
                </div>
                    <span asp-validation-for="GeocodedAddress" class="text-danger"></span>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-5">
            <div class="form-group">Must add Unit/Apt number in Special Instructions<br>
                <label asp-for="SpecialInstructions" class="col-md-2 control-label"></label>
                <div class="col-md-10">
                    <input id='SpecialInstructions' type=text  asp-for="SpecialInstructions" value="" class="form-control" />
                    <span asp-validation-for="SpecialInstructions" class="text-danger"></span>
                </div>
            </div>
        </div>
    </div>
</div> 
            <input id='StreetName' type='hidden' />
            <input id='City' type="hidden" />
            <input id='Province' type="hidden" />
            <input id='PostalCode' type="hidden" />
            <input id='Country' type="hidden" />
<hr/>  
<div class="container">    
    <div class="row">
 @{var i=0;
    @foreach (var item in ViewBag.query) {
        i+=1;        

    <div class="col-md-2">
        <div class="simpleCart_shelfItem col-md-12">
            <img class="item_add" src="@item.ImageFilePath" height="75px" width="75px" />
            <h4 class="item_name">@item.Label</h4>
            <input type="text" value="1" class="item_Quantity">
            <span class="item_price">$35.00</span>
            <a class="item_add" href="javascript:;"> Add to Cart </a>
        </div>
    </div>

   }   
 
}
</div> 
</div>
<hr />
<h2>Cart</h2>
<span id="demo" class="demo">Holder for order update</span>
<div class="yabholder" >
    <div >
        <Table>
            <tr>
                <td colspan="2" class="tabcell" ><div class="simpleCart_items"></div></td>
            </tr>
        </table><table>    
           <tr>
                <td  class="tabcell" >Sub Total</td>
                <td class="tabcell" align="right"><div class="simpleCart_total"></div></td>
           </tr>
            <tr>
                <td  class="tabcell">Delivery Fee</td>
                <td class="tabcell" ><div class="simpleCart_shipping"></div></td>
            </tr>
            <tr>
                <td  class="tabcell">GST</td>
                <td class="tabcell"><div class="simpleCart_tax"></div></td>
            </tr>
            <tr>
                <td  class="tabcell">Total</td>
                <td class="tabcell" ><div class="simpleCart_grandTotal"></div></td>
            </tr>
            <tr>
                <td colspan="2" class="tabcell"><button class="simpleCart_checkout">Checkout</button>
               <button class="simpleCart_empty">Empty Cart</button></td>
            </tr>
        </Table>
    </div>
</div>




<script>


 function LoadMap() {
        Microsoft.Maps.loadModule('Microsoft.Maps.AutoSuggest', {
            callback: function () {
                var manager = new Microsoft.Maps.AutosuggestManager({
                    placeSuggestions: false
                });
                manager.attachAutosuggest('#GeocodedAddress', '#searchBoxContainer', selectedSuggestion);
            },
            errorCallback: function(msg){
                alert(msg);
            },
            credentials: 'AsBPQXiDKMHud6u68TPcW7rq2UpVmTegFhU7Im1eLE_pFgiEbGLXtoa4xSu2R5fA' 
        });
    }
    
    function selectedSuggestion(result) {

        //Populate the address textbox values.
        if (top.document.getElementById('StreetName')!=null){
            top.document.getElementById('StreetName').value = result.address.addressLine;
            top.document.getElementById('City').value = result.address.locality;
            top.document.getElementById('Province').value = result.address.adminDistrict;
            top.document.getElementById('PostalCode').value = result.address.postalCode;
            top.document.getElementById('Country').value = result.address.countryRegion;
        }
        var exteriorRing;
        var InDeliveryArea=false;
        var  AreaOpen=0;
        var InDeliveryAreaConfirmed=false;
        @foreach (var item in ViewBag.deliveryareas){
 
                @:exteriorRing = [
                    @:@item.Points
                @:];
            @: polygon@(item.ID) = new Microsoft.Maps.Polygon(exteriorRing, {
            @:fillColor: 'rgba(0, 255, 0, 0.5)',
            @:strokeColor: 'red',
            @:strokeThickness: 2
            @:});

            @:var points@(item.ID) = polygon@(item.ID).getLocations();
            @:InDeliveryArea =  pointInPolygon(points@(item.ID),result.location.latitude,result.location.longitude) 
            @:if (InDeliveryArea==true){
            @:    InDeliveryAreaConfirmed=true; 
            @:    AreaOpen=@(item.Status)  
            @:        var openTime = new Date(Date.parse('@item.OpenTime'));
            @:        var closedTime = new Date(Date.parse('@item.ClosedTime'));
            
            @:        var openStr = openTime.getHours() + ":" + openTime.getMinutes();
            @:        var closeStr = closedTime.getHours() + ":" + closedTime.getMinutes();
            @:        var status = @item.Status ;
            @:        var open = @item.Open.ToString().ToLower();
         
            @:}
        }
   

            InDeliveryAreaConfirmed ? message="Your all set! This address qualifies for immediate delivery between " + openStr + " and " + closeStr : message="Sorry this address does not qualify for immediate delivery, your items will be mailed. Please add your email and submit the form behind this message and we will notify you when the area opens "
            InDeliveryAreaConfirmed ? title="Dispatched Delivery" : title="Postal Delivery"
           if (AreaOpen==2){  
               message = "Your area will be open very soon. Please add your email and submit the form behind this message and we will notify you when the area opens.";
           }
   
            var myAnswer = alert(title + " - " + message);
            if (myAnswer){
                top.document.getElementById("GeocodedAddress").value=""
            }else{
                top.document.getElementById("GeocodedAddress").value=""
            }
            InDeliveryAreaConfirmed=false;
            AreaOpen=0;
    }

function pointInPolygon(points,lat,lon) 
{
  var i;
  var j=points.length-1;
  var inPoly=false;

  for (i=0; i<points.length; i++) 
  {
    if (points[i].longitude<lon && points[j].longitude>=lon 
      || points[j].longitude<lon && points[i].longitude>=lon) 
    {
      if (points[i].latitude+(lon-points[i].longitude)/ 
        (points[j].longitude-points[i].longitude)*(points[j].latitude 
          -points[i].latitude)<lat) 
      {
        inPoly=!inPoly; 
      }
    }
    j=i; 
  }
  return inPoly; 
}
 var userId = '@ViewBag.UserId';
 function loadDoc() {
    var xhttp = new XMLHttpRequest();
    var datevar = Date().substr(0,Date().indexOf("GMT")-4);
    xhttp.onreadystatechange = function() {
        //alert("got return from xhttp readyState:" + this.readyState + " status:" + this.status + " text:" + this.responseText);
        if (this.readyState == 4 && this.status == 200) {
           
            document.getElementById("demo").innerHTML =  "Order was posted to orders table";
            
        }
    };
    xhttp.open("POST", "/Orders/CreateApi/", true);
    xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    //xhttp.send("fname=Henry&lname=Ford");
    //return;
    var buildstr2 = "";
    for (var i in simpleCart.items()){
        buildstr2 +=  simpleCart.items()[i].get('quantity') + "x" + simpleCart.items()[i].get('name') + " at: $" + simpleCart.items()[i].get('price') + " for a total of: $" +  simpleCart.items()[i].get('total') +  '  \n\r';
    }
    buildstr2 += "<br>Grand Total: $" + simpleCart.grandTotal();
     var buildStr = ""
    //buildStr += "OrderDate='" + datevar + "'&";
    //buildStr += "DeliveryDate='" + datevar + "'&";
    buildStr += "Total=" +  simpleCart.grandTotal() + "&";    //"1" + "&";  
    buildStr += "GeocodedAddress='" + top.document.getElementById("GeocodedAddress").value + "'&";
    //buildStr += "Weight=" + "7" + "&";
    buildStr += "PaymentType=" + "1" + "&";
    buildStr += "Details='" +  buildstr2 + "'&";   // "test details" + "'&";   
    buildStr += "SpecialInstructions='" + top.document.getElementById("SpecialInstructions").value + "'&";
    buildStr += "Status=" + "1" + "&";
    //buildStr += "DriverId=" + "1" + "&";
    //buildStr += "CustomerId=" + "1" ;
    xhttp.send(buildStr); 
   
}

function DebitWayInit() {
    var xhttp = new XMLHttpRequest();
    //Required Variables for DebitWay 
    var website_unique_id="myWebsiteID";
    var return_url="https://www.uberduber.com/DebitWay";
    var language="English";
    var first_name="@ViewBag.user.FirstName";
    var last_name="@ViewBag.user.LastName";
    var address="@ViewBag.user.StreetName";
    var city = "@ViewBag.user.City";
    var state_or_province="@ViewBag.user.Province";
    var zip_or_postal_code ="@ViewBag.user.PostalCode";
    var country="@ViewBag.user.Country";
    var email="@ViewBag.user.Email";
    var phone="@ViewBag.user.PhoneNumber";
    var shipping_address= top.document.getElementById("StreetName").value ;
    var shipping_city=  top.document.getElementById('City').value;
    var shipping_state_or_province=  top.document.getElementById('Province').value;
    var shipping_zip_or_postal_code = top.document.getElementById('PostalCode').value;
    var shipping_country=  top.document.getElementById('Country').value;
    var item_name = "";
    var quantity = 0;
    for (var i in simpleCart.items()){
        item_name +=  simpleCart.items()[i].get('quantity') + "x" + simpleCart.items()[i].get('name') + ","
        quantity+= simpleCart.items()[i].get('quantity');
        
    }

    var amount = simpleCart.grandTotal();
    var item_code = "unknown"
    var custom=top.document.getElementById("SpecialInstructions").value
    var shipment=true;
    var merchant_transaction_id = "@Guid.NewGuid()";
    
    var datevar = Date().substr(0,Date().indexOf("GMT")-4);

    xhttp.onreadystatechange = function() {
        //alert("got return from xhttp readyState:" + this.readyState + " status:" + this.status + " text:" + this.responseText);
        if (this.readyState == 4 && this.status == 200) {
           
            document.getElementById("demo").innerHTML =  "Order was posted to orders table";
            
        }else{
            alert("got return from xhttp readyState:" + this.readyState + " status:" + this.status + " text:" + this.responseText);
        }
    };

    
    
    xhttp.open("POST", "/DebitWay/CreateApi/", true);
    xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

    
  
     var buildStr = ""
    buildStr += "website_unique_id='" +  website_unique_id + "'&";    //"1" + "&";  
    buildStr += "language='" +  language + "'&"; 
    buildStr += "first_name='" +  first_name + "'&"; 
    buildStr += "last_name='" +  last_name + "'&"; 
    buildStr += "address='" +  address + "'&"; 
    buildStr += "city='" +  city + "'&"; 
    buildStr += "state_or_province='" +  state_or_province + "'&"; 
    buildStr += "zip_or_postal_code='" +  zip_or_postal_code + "'&"; 
    buildStr += "country='" +  country + "'&"; 
    
    buildStr += "email='" +  email + "'&"; 
    buildStr += "phone='" +  phone + "'&"; 
    buildStr += "shipping_address='" +  shipping_address + "'&"; 
   
    buildStr += "shipping_city='" +  shipping_city + "'&"; 
    buildStr += "shipping_state_or_province='" +  shipping_state_or_province + "'&"; 
    buildStr += "shipping_zip_or_postal_code='" +  shipping_zip_or_postal_code + "'&"; 
    buildStr += "shipping_country='" +  shipping_country + "'&"; 
    buildStr += "item_name='" +  item_name + "'&"; 
    buildStr += "quantity='" +  quantity + "'&"; 
    buildStr += "amount='" +  amount + "'&"; 
    buildStr += "item_code='" +  item_code + "'&"; 
    buildStr += "custom='" +  custom + "'&"; 
    buildStr += "shipment='" +  shipment + "'&"; 
    buildStr += "merchant_transaction_id='" +  merchant_transaction_id + "'&"; 
   
  alert(buildStr);
   xhttp.send(buildStr); 
    return;
   
}


var x = top.document.getElementById("GeocodedAddress");
function getLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(showPosition);
    } else { 
        alert("Geolocation is not supported by this browser.");
    }
}

function showPosition(position) {
  
    checkLocation(position.coords.latitude ,position.coords.longitude);
}
window.addEventListener("DOMContentLoaded", function() {
     

    }, false);


function checkLocation(lat,lon){
     var exteriorRing;
         var InDeliveryArea=false;
        var  AreaOpen=0;
        var InDeliveryAreaConfirmed=false;
        @foreach (var item in ViewBag.deliveryareas){
                @:exteriorRing = [
                    @:@item.Points
                @:];
            @:polygon@(item.ID) = new Microsoft.Maps.Polygon(exteriorRing, {
            @:fillColor: 'rgba(0, 255, 0, 0.5)',
            @:strokeColor: 'red',
            @:strokeThickness: 2
            @:});

        
            @:var points@(item.ID) = polygon@(item.ID).getLocations();
            @:InDeliveryArea =  pointInPolygon(points@(item.ID),lat,lon) 
            @:if (InDeliveryArea==true){
            @:    InDeliveryAreaConfirmed=true; 
            @:    AreaOpen=@(item.Status)  
            @:        var openTime = new Date(Date.parse('@item.OpenTime'));
            @:        var closedTime = new Date(Date.parse('@item.ClosedTime'));
            
            @:        var openStr = openTime.getHours() + ":" + openTime.getMinutes();
            @:        var closeStr = closedTime.getHours() + ":" + closedTime.getMinutes();
            @:        var status = @item.Status ;
            @:        var open = @item.Open.ToString().ToLower();
         
            @:}
        }
            InDeliveryAreaConfirmed ? message="Your current GPS location is located in an area that qualifies for immediate delivery between " + openStr + " and " + closeStr  + "Do you want to use this location for this order": message="Sorry your current GPS location does not qualify for immediate delivery, your items will be mailed. Please add your email and submit the form behind this message and we will notify you when the area opens "
            InDeliveryAreaConfirmed ? title="Dispatched Delivery" : title="Postal Delivery"
           if (AreaOpen==2){  
               message = "Your current GPS location is in area will be open very soon. Please add your email and submit the form behind this message and we will notify you when the area opens.";
           }
   
            var myAnswer = confirm(title + " - " + message);
            if (myAnswer){
                top.document.getElementById("GeocodedAddress").value=lat + " - " + lon
            }else{
            //    top.document.getElementById("GeocodedAddress").value=""
            }
            InDeliveryAreaConfirmed=false;
            AreaOpen=0;
        
            
    }
</script>












<script src="/js/checkmeout.js"></script>


    <!--<script type='text/javascript' src='/js/deliveryzone.js'></script>-->

        <script  type='text/javascript' src='https://www.bing.com/api/maps/mapcontrol?callback=LoadMap' async defer></script>
  