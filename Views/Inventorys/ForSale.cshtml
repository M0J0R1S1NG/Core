@model Core.Models.DebitWay
@using System.Linq;
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.Mvc.ViewFeatures
@using System.Collections.Generic
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Http.Authentication
@using Core.Models
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

@{
    ViewData["Title"] = "Shopping";
}

<h2>@ViewData["Title"]</h2>

<h3>Your home delivery addresss is: @ViewData["StreetNumber"] -  @ViewData["DeliveryAddress"]<div onclick="showDeliveryAreaDiv()" class="btn btn-danger">Change</div></h3>
<div style="display:none" class="container deliveryAddressDiv">
            If you want todays delivery sent somewhere other than your address on file you must confirm below.  The address in this box will be delivered to.  Leave alone to deliver to your account address.
            You can also<br> <input type=button class=btn btn-default value="Use My Current GPS Location" onclick="getLocation()"></input>  
    <hr/>

    The inventory is based on your delivery area and is live.  If you can order it we will deliver it.
    <div class="container col-md-2">
        <div class="form-group">
        <input type="hidden"  id="DeliveryAreaId" name="DeliveryAreaId"   class="form-control" ></input>
        </div>
        <div class="form-group">
            <label  class="col-md-3 control-label">Todays Delivery Area, Hours, and Menu</label>
            <div class="col-md-3">
                <select id="DeliveryAreaIdList" name="DeliveryAreaIdList" asp-items=ViewBag.deliveryAreasForSelect disabled class="form-control"></select>
            </div>
        </div>
        <div class="form-group">
        
            <div class="col-md-3">
                <input  id="DeliveryAreaOpenTime" name="DeliveryAreaOpenTime"   class="form-control btn btn-info"></input>
            </div>
        </div>
        <div class="form-group">
          
            <div class="col-md-3">
                <input id="DeliveryAreaClosedTime" name="DeliveryAreaClosedTime"   class="form-control btn btn-info "></input>
            </div>
        </div>
    </div>
</div>



<div  style="display:none" class="container deliveryAddressDiv">
    <div class="row">
        <div class="col-xs-11">
            If you change this address and it changes your delivery area you will get a new menu based on the new delivery areas inventory
            <div class="form-group">
                <label  class="col-md-2 control-label">Todays Delivery Address</label>
                <div class="col-md-10">
                    <div id='searchBoxContainer'> 
                        <input id='GeocodedAddress' type=text   value="@ViewData["DeliveryAddress"]" class="form-control" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-11">
            <div class="form-group">Must add Apt/Buzz number in Special Instructions if using a new location if applicable<br>
                <label  class="col-md-2 control-label">Special Instructions</label>
                <div class="col-md-10">
                    <input id='SpecialInstructions' type=text value="@ViewData["StreetNumber"]"  value="" class="form-control" />
                   
                </div>
            </div>
        </div>
    </div>
</div>     


            <input id='orderAptNumber' type='hidden' />
            <input id='orderStreetName' type='hidden' />
            <input id='orderCity' type="hidden" />
            <input id='orderProvince' type="hidden" />
            <input id='orderPostalCode' type="hidden" />
            <input id='orderCountry' type="hidden" />
            <input id='orderDeliveryAreaId' type="hidden" />
            <input id='orderDeliveryAreaName' type="hidden" />
            <input id='orderDeliveryAreaOpenHours' type="hidden" />
            <input id='orderDeliveryAreaClosedHours' type="hidden" />
            
            <input id='orderPartnerId' type="hidden" />
            <input id='orderDriverId' type="hidden" />
            <input id='orderSMSNumber' type="hidden" />
             <input id='lat' type="hidden" />
            <input id='lon' type="hidden" />
            
<hr/>  



<div class="container shoppingCartDiv">    
    <div id="cartRow" name="cartRow" class="row">






@{var j=0;
    @foreach (dynamic item in ViewBag.InventoryByArea) {
 
        j+=1;        
   
        <div id="cartArea" class="cartItemArea@(item.ID) col-md-3" style="display:none">
            <div class="col-md-12">
                <span id="QuantitiyAvailable">Quantity Available: @item.Quantity packages</span>
                <div class="simpleCart_shelfItem col-md-12">
                    <img class="item_add" src="@item.ImageFilePath" height="300px" width="400px" />
                    <h4 class="item_name">@item.Label</h4>
                    <input type="text" value="1" class="item_Quantity">
                    <span class="item_price">$@item.Price</span>
                    <span style="display:none" class="item_invid">@item.InventoryId</span>
                    <a class="item_add" href="javascript:;"> Add to Cart </a>
                </div>
            </div>
        </div>
   
   }   
 
}
</div>
<hr />
<h2>Cart</h2>
<span id="demo" class="demo">Holder for order update</span>
<div class="yabholder" >
    <div >
        <Table>
            <tr>
                <td colspan="2" class="tabcell" ><div class="simpleCart_items"></div></td>
            </tr>
        </table><table>    
           <tr>
                <td  class="tabcell" >Sub Total</td>
                <td class="tabcell" align="right"><div class="simpleCart_total"></div></td>
           </tr>
            <tr>
                <td  class="tabcell">Delivery Fee</td>
                <td class="tabcell" ><div class="simpleCart_shipping"></div></td>
            </tr>
            <tr>
                <td  class="tabcell">GST</td>
                <td class="tabcell"><div class="simpleCart_tax"></div></td>
            </tr>
            <tr>
                <td  class="tabcell">Total</td>
                <td class="tabcell" ><div class="simpleCart_grandTotal"></div></td>
            </tr>
            <tr>
                <td colspan="2" class="tabcell">
                <button class="btn btn-default" onclick="DebitWayInit('cash')">Cash Checkout</button>
                <button class="btn btn-default simpleCart_empty">Empty Cart</button>
                <!--<button class="btn btn-default" onclick="DebitWayInit('interac')">Interac Checkout</button>-->
                <!--<button disbaled class="btn btn-default simpleCart_checkout" >Credit Cards</button>-->
                <!--<button style="display:'none'" class="btn btn-default" onclick="DebitWayInit('paypal')" >Credit Cards</button>-->
               
               
               </td>
            </tr>
        </Table>
    </div>
</div>

</div>
<form hidden id="debitwayform" name="debitwayform"  method="post" action="https://www.debitway.com/process/index.php">

      <div class="form-horizontal">
        <h4>DebitWay</h4>
        <hr />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-group">
            <label asp-for="identifier" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="identifier" class="form-control" name="identifier" id="identifier"/>
                <span asp-validation-for="identifier" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="vericode" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="vericode" class="form-control" name="vericode" id="vericode"/>
                <span asp-validation-for="vericode" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="website_unique_id" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="website_unique_id" class="form-control" name="website_unique_id" id="website_unique_id"/>
                <span asp-validation-for="website_unique_id" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="return_url" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="return_url" class="form-control" name="return_url" id="return_url"/>
                <span asp-validation-for="return_url" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="transaction_id" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="transaction_id" class="form-control" name="transaction_id" id="transaction_id"/>
                <span asp-validation-for="transaction_id" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="merchant_transaction_id" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="merchant_transaction_id" class="form-control" name="merchant_transaction_id" id="merchant_transaction_id" />
                <span asp-validation-for="merchant_transaction_id" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="transaction_status" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="transaction_status" class="form-control" name="transaction_status" id="transaction_status" />
                <span asp-validation-for="transaction_status" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="transaction_result" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="transaction_result" class="form-control" name="transaction_result" id="transaction_result"/>
                <span asp-validation-for="transaction_result" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="transaction_date" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="transaction_date" class="form-control"  name="transaction_date" id="transaction_date"/>
                <span asp-validation-for="transaction_date" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="transaction_type" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="transaction_type" class="form-control" name="transaction_type" id="transaction_type" />
                <span asp-validation-for="transaction_type" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="item_name" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="item_name" class="form-control" name="item_name" id="item_name"/>
                <span asp-validation-for="item_name" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="amount" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="amount" class="form-control" name="amount" id="amount" />
                <span asp-validation-for="amount" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="quantity" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="quantity" class="form-control" name="quantity" id="quantity" />
                <span asp-validation-for="quantity" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="item_code" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="item_code" class="form-control" name="item_code" id="item_code"/>
                <span asp-validation-for="item_code" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="language" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="language" class="form-control" name="language" id="language"/>
                <span asp-validation-for="language" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="email" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="email" class="form-control" name="email" id="email"/>
                <span asp-validation-for="email" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="phone" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="phone" class="form-control" name="phone" id="phone" />
                <span asp-validation-for="phone" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="custom" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="custom" class="form-control" name="custom" id="custom"/>
                <span asp-validation-for="custom" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="shipment" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="shipment" class="form-control" name="shipment" id="shipment" />
                <span asp-validation-for="shipment" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="first_name" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="first_name" class="form-control" name="first_name" id="first_name"/>
                <span asp-validation-for="first_name" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="last_name" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="last_name" class="form-control" name="last_name" id="last_name"/>
                <span asp-validation-for="last_name" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="address" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="address" class="form-control" name="address" id="address"/>
                <span asp-validation-for="address" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="city" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="city" class="form-control" name="city" id="city" />
                <span asp-validation-for="city" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="state_or_province" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="state_or_province" class="form-control" name="state_or_province" id="state_or_province" />
                <span asp-validation-for="state_or_province" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="zip_or_postal_code" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="zip_or_postal_code" class="form-control" name="zip_or_postal_code" id="zip_or_postal_code" />
                <span asp-validation-for="zip_or_postal_code" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="country" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="country" class="form-control" name="country" id="country"/>
                <span asp-validation-for="country" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="shipping_address" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="shipping_address" class="form-control" name="shipping_address" id="shipping_address"/>
                <span asp-validation-for="shipping_address" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="shipping_city" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="shipping_city" class="form-control" name="shipping_city" id="shipping_city"/>
                <span asp-validation-for="shipping_city" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="shipping_state_or_province" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="shipping_state_or_province" class="form-control" name="shipping_state_or_province" id="shipping_state_or_province"/>
                <span asp-validation-for="shipping_state_or_province" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="shipping_zip_or_postal_code" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="shipping_zip_or_postal_code" class="form-control" name="shipping_zip_or_postal_code" id="shipping_zip_or_postal_code"/>
                <span asp-validation-for="shipping_zip_or_postal_code" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="shipping_country" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="shipping_country" class="form-control" name="shipping_country" id="shipping_country"/>
                <span asp-validation-for="shipping_country" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="customer_errors_meaning" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="customer_errors_meaning" class="form-control" name="customer_errors_meaning" id="customer_errors_meaning" />
                <span asp-validation-for="customer_errors_meaning" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="errors" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="errors" class="form-control" name="errors" id="errors"/>
                <span asp-validation-for="errors" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="issuer_name" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="issuer_name" class="form-control" name="issuer_name" id="issuer_name"/>
                <span asp-validation-for="issuer_name" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="issuer_confirmation" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="issuer_confirmation" class="form-control" name="issuer_confirmation" id="issuer_confirmation"/>
                <span asp-validation-for="issuer_confirmation" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="status" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="status" class="form-control" name="status" id="status"/>
                <span asp-validation-for="status" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="time_stamp" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="time_stamp" class="form-control" name="time_stamp" id="time_stamp" />
                <span asp-validation-for="time_stamp" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input name="debitwaySubmit" id="debitwaySubmit" type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
</form>

<script>
    var AreaIds = []; 
     var NotInArea=false; 
    var userHomeDeliveryAreaId=-1;
    var currentDeliveryAreaId=-1;
     @foreach (dynamic item in ViewBag.deliveryAreaName) {  // there should be only one returned in this loop otherwise it will fuck up
       ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        @:top.document.getElementById("DeliveryAreaIdList").value=@item.ID;
         @:top.document.getElementById("DeliveryAreaOpenTime").value="@item.OpenTime";
          @:top.document.getElementById("DeliveryAreaClosedTime").value="@item.ClosedTime";
        
        @:userHomeDeliveryAreaId=@item.ID;
        @:currentDeliveryAreaId=@item.ID;
     }
@foreach (dynamic item in ViewBag.deliveryareas) {
    @:AreaIds.push(@item.ID);
}
 function LoadMap() {
   
        Microsoft.Maps.loadModule('Microsoft.Maps.AutoSuggest', {
            callback: function () {
                var manager = new Microsoft.Maps.AutosuggestManager({
                    placeSuggestions: true,
                   
                });
                manager.attachAutosuggest('#GeocodedAddress', '#searchBoxContainer', selectedSuggestion);
            },
            errorCallback: function(msg){
                alert(msg);
            },
            credentials: 'AsBPQXiDKMHud6u68TPcW7rq2UpVmTegFhU7Im1eLE_pFgiEbGLXtoa4xSu2R5fA' 
        });
          getLocation();
          //top.document.getElementById("GeocodedAddress").onchange();
         // manager.
    }
    
    function selectedSuggestion(result) {
        //Populate the address textbox values.
        if (top.document.getElementById('orderStreetName')!=null){
            top.document.getElementById('orderStreetName').value = result.address.addressLine;
            top.document.getElementById('orderCity').value = result.address.locality;
            top.document.getElementById('orderProvince').value = result.address.adminDistrict;
            top.document.getElementById('orderPostalCode').value = result.address.postalCode;
            top.document.getElementById('orderCountry').value = result.address.countryRegion;
            top.document.getElementById('orderAptNumber').value = top.document.getElementById('SpecialInstructions').value;
            
            
        }
        var exteriorRing;
        var InDeliveryArea=false;
        var AreaOpen=0;
        var AreaName="";
        var AreaId=0;
        var AreaCount=0;
        var InDeliveryAreaConfirmed=false;
        //AreaIds=[];
        
        @{var AreaCount=0;}
        @foreach (var item in ViewBag.deliveryareas){
                AreaCount+=1;
               

                @:exteriorRing = [
                    @:@item.Points
                @:];
            @: polygon@(item.ID) = new Microsoft.Maps.Polygon(exteriorRing, {
            @:fillColor: 'rgba(0, 255, 0, 0.5)',
            @:strokeColor: 'red',
            @:strokeThickness: 2
            @:});

            @:var points@(item.ID) = polygon@(item.ID).getLocations();
            @:InDeliveryArea =  pointInPolygon(points@(item.ID),result.location.latitude,result.location.longitude) 
            @:if (InDeliveryArea==true){
            @:    InDeliveryAreaConfirmed=true; 
            @:    AreaOpen=@(item.Status);  
            @:    AreaName="@item.Name";
            @:    AreaId=@item.ID;
            @:        var openTime = new Date(Date.parse('@item.OpenTime'));
            @:        var closedTime = new Date(Date.parse('@item.ClosedTime'));
            
            @:        var openStr = openTime.getHours() + ":" + openTime.getMinutes();
            @:        var closeStr = closedTime.getHours() + ":" + closedTime.getMinutes();
            @:        var status = @item.Status ;
            @:        var open = @item.Open.ToString().ToLower();
            @:        top.document.getElementById('orderDeliveryAreaId').value = @item.ID;
            @:        top.document.getElementById('DeliveryAreaIdList').value = @item.ID;
            @:        top.document.getElementById('DeliveryAreaOpenTime').value = "@item.OpenTime";
            @:        top.document.getElementById('DeliveryAreaClosedTime').value = "@item.ClosedTime";

            @foreach (var partner in ViewBag.partners){
               @if (partner.Id == item.PartnerId){
               //@if (partner.DeliveryArea == item.ID){
                        @: var partnerId = @partner.Id;
                        @: var areaSMS = "@partner.SMSNumber";
                        @: var partnerName ="@partner.Name";
                         @: var partnerDeliveryArea ="@partner.DeliveryArea";
                        @: top.document.getElementById('orderPartnerId').value = @partner.Id;
                   @if (partner.Status ==2){
                        //@: var partnerId = @partner.Id;
                        //@: var areaSMS = @partner.SMSNumber;
                   }else{
                       
                        var DriverIdStr = "";
                        var SMSStr = "";
                        var d=0;
                        @foreach (var driver in ViewBag.drivers){
                            @if(driver.PartnerId==partner.Id){
                              d+=1;
                              DriverIdStr+="DriverId"+d+":"+driver.ID+",";
                              SMSStr+="SMS"+d+":"+driver.PhoneNumber+",";
                        @:    var DriverId@(d) = @driver.ID;
                        @:    var SMS@(d) = "@driver.PhoneNumber";

                            }
                        @: var DriverIdStr="@DriverIdStr";
                        @: var SMSStr="@SMSStr"; 
                        @:    DriverIdStr=DriverIdStr.slice(0,-1);
                        @:    SMSStr= SMSStr.slice(0,-1);   
                        @: top.document.getElementById('orderDriverId').value = ("@DriverIdStr").slice(0,-1);
                        @: top.document.getElementById('orderSMSNumber').value = ("@SMSStr").slice(0,-1);

                         
                       }
                   }
                }
            }
         
            @:}
        
        }
           

            if (AreaId==currentDeliveryAreaId){

            }else{
                //alert("Your delivery area changed because of your GPS location or address change.  You will have to select your items from this areas menu now.  Areas nearby each other usually share inventory.");
                simpleCart.empty();
                currentDeliveryAreaId=AreaId;

            }

                InDeliveryAreaConfirmed ? message="Your all set! This address qualifies for immediate delivery between " + openStr + " and " + closeStr : message="Sorry this address does not qualify for immediate delivery, your items will be mailed. Please add your email and submit the form behind this message and we will notify you when the area opens "
                InDeliveryAreaConfirmed ? title="Dispatched Delivery" : title="Postal Delivery"
                InDeliveryAreaConfirmed ? NotInArea=false :NotInArea=true;
                if (AreaOpen==2){  
                    message = "Your area will be open very soon. Please add your email and submit the form behind this message and we will notify you when the area opens.";
                    NotInArea=false; 
                }
                var myAnswer = 0;
                if (!InDeliveryAreaConfirmed){ myAnswer = confirm(title + " - " + message)};
                if (myAnswer){
                    
                }else{
                    top.document.getElementById("GeocodedAddress").value= top.document.getElementById("orderStreetName").value;
                }

            
            InDeliveryAreaConfirmed=false;
            AreaOpen=0;
            fixMenu(AreaId);
            startup=false;
    }

function fixMenu(da){


    AreaIds.forEach(function (item,index,arr){
        classToShow=".cartItemArea" + arr[index];
      
      
        myClasses = document.querySelectorAll(classToShow)
        if  (myClasses.length>0){
            for (var i=0;i<=myClasses.length-1;i++){
                 if (da==arr[index] || NotInArea){
                   myClasses[i].style.display ="";
                }else{
                    myClasses[i].style.display ="none";
                }
            }
            NotInArea=false;
            
        }
      
    });


    
}
function showDeliveryAreaDiv(){
     classToShow=".deliveryAddressDiv" ;
      
      
        myClasses = document.querySelectorAll(classToShow)
        if  (myClasses.length>0){
            for (var i=0;i<=myClasses.length-1;i++){
                if (myClasses[i].style.display ==""){
                   myClasses[i].style.display ="none";
                }else{
                   myClasses[i].style.display ="";
                }
                   
               
            }
           
            
        }
}
function pointInPolygon(points,lat,lon) 
{
  var i;
  var j=points.length-1;
  var inPoly=false;

  for (i=0; i<points.length; i++) 
  {
    if (points[i].longitude<lon && points[j].longitude>=lon 
      || points[j].longitude<lon && points[i].longitude>=lon) 
    {
      if (points[i].latitude+(lon-points[i].longitude)/ 
        (points[j].longitude-points[i].longitude)*(points[j].latitude 
          -points[i].latitude)<lat) 
      {
        inPoly=!inPoly; 
      }
    }
    j=i; 
  }
  return inPoly; 
}
var userId = '@ViewBag.UserId';
var geocodeRequest = "https://dev.virtualearth.net/REST/v1/Locations?query=" + encodeURIComponent("[Location to geocode]") + "&jsonp=GeocodeCallback&key=AsBPQXiDKMHud6u68TPcW7rq2UpVmTegFhU7Im1eLE_pFgiEbGLXtoa4xSu2R5fA";


 function InteracOrder(type) {
    var xhttp = new XMLHttpRequest();
    var datevar = Date().substr(0,Date().indexOf("GMT")-4);
    xhttp.onreadystatechange = function() {
        //alert("got return from xhttp readyState:" + this.readyState + " status:" + this.status + " text:" + this.responseText);
        if (this.readyState == 4 && this.status == 200) {
           var orderGuid=this.response;
           top.document.getElementById("merchant_transaction_id").value = orderGuid;
           if (type=='cash'){
               top.document.getElementById("debitwayform").action="/Debitway/Create";
           }else if(type=='interac'){
               top.document.getElementById("debitwayform").action="https://www.debitway.com/process/index.php";
           }else if(type=='paypal'){
               top.document.getElementById("debitwayform").action="/Debitway/Create";
                 top.document.getElementById("debitwayform").target="_new";
           }else{
               alert("Big error don't know how you want to pay");
               return;
           }
           var confirmMsg="You have selected a cash checkout.  You total for this order is: "
           confirmMsg+= simpleCart.grandTotal();
           confirmMsg+=".  If possible please have exact change for the delivery person.";

           confirmMsg+= "  By clicking OK you are agreeing to the delivery terms and conditions on our website.  If you do not wnat this order please press cancel, otherwise we will see you in a about 20 minutess"
           var confirmPurchase=confirm( confirmMsg);
           if (confirmPurchase){
                top.document.getElementById("debitwayform").submit();
           }
        }
    };
    xhttp.open("POST", "/Orders/Interac/", true);
    xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    var buildstr2 = "";
    var item_code="";
    for (var i in simpleCart.items()){
        buildstr2+=simpleCart.items()[i].get('quantity') + "x" + simpleCart.items()[i].get('name') + " at: $" + simpleCart.items()[i].get('price') + " for a total of: $" +  simpleCart.items()[i].get('total') +  '  \n\r';
        item_code+=simpleCart.items()[i].get('quantity') + "x" + simpleCart.items()[i].get('invid') + ","
    }
    buildstr2 += "<br>Grand Total: $" + simpleCart.grandTotal();
     var buildStr = ""
    //buildStr += "OrderDate='" + datevar + "'&";
    //buildStr += "DeliveryDate='" + datevar + "'&";
    buildStr += "Total=" +  simpleCart.grandTotal() + "&";    //"1" + "&";  
    buildStr += "GeocodedAddress='" + top.document.getElementById("GeocodedAddress").value + "'&";
    buildStr += "Weight=" + simpleCart.shipping() + "&";
    var paymentType=0;
    if (type=="cash"){var paymentType=1}
    if (type=="interac"){var paymentType=2}
    if (type=="paypal"){var paymentType=3}
    
    buildStr += "PaymentType=" + paymentType + "&";
    buildStr += "Details='" +  buildstr2 + "'&";   // "test details" + "'&";   
    buildStr += "SpecialInstructions='" + top.document.getElementById("SpecialInstructions").value + "'&";
    buildStr += "PhoneNumber='"+ item_code + "'&";
    buildStr += "Status=" + "1" + "&";
    xhttp.send(buildStr); 
}

function DebitWayInit(type) {
    if ( simpleCart.grandTotal()<39){
        alert("The minimum order amount is $40.00 after taxes and delivery charges.  Please select more items to continue.  Thank You ")
        return;
    }
    var xhttp = new XMLHttpRequest();
   
   var debitWayStatus =type;
    
    //Required Variables for DebitWay 
    var website_unique_id="spJx8tqQJYjKRw24";
    var identifier="ERP1721663ro022";
    var vericode = "VeriPzqgepJQIC";
    var return_url="Https://@Context.Request.Host/DebitWay/Create"          //  "https://www.uberduber.com/DebitWay/Create";
    var language="en";
    var first_name="@ViewBag.user.FirstName";
    var last_name="@ViewBag.user.LastName";
    var address="@ViewBag.user.StreetName";
    var delivery_address="@ViewBag.user.DeliveryAddress";
    var city = "@ViewBag.user.City";
    var state_or_province="@ViewBag.user.Province";
    var zip_or_postal_code ="@ViewBag.user.PostalCode";
    var country="@ViewBag.user.Country";
    var emailadd="@ViewBag.user.Email";
    var phone="@ViewBag.user.PhoneNumber";
    var shipping_address= top.document.getElementById("orderStreetName").value ;
    var shipping_city=  top.document.getElementById('orderCity').value;
    var shipping_state_or_province=  top.document.getElementById('orderProvince').value;
    var shipping_zip_or_postal_code = top.document.getElementById('orderPostalCode').value;
    var shipping_country=  top.document.getElementById('orderCountry').value;
    var item_name = "";
    var quantityTot = 0;
    var item_code = "";
    for (var i in simpleCart.items()){
        item_name +=  simpleCart.items()[i].get('quantity') + "x" + simpleCart.items()[i].get('name') + ","
        item_code +=  simpleCart.items()[i].get('quantity') + "x" + simpleCart.items()[i].get('invid') + ","
        quantityTot+= simpleCart.items()[i].get('quantity');
    }
    var amount = simpleCart.grandTotal();
    var specInstructions = top.document.getElementById("SpecialInstructions").value.replace(""," ");
    var custom=  userId + ' , '  +  specInstructions+","+top.document.getElementById("orderPartnerId").value +","+top.document.getElementById("orderSMSNumber").value+","+top.document.getElementById("orderDriverId").value  ;
    var shipment="no";
    var merchant_transaction_id = "@Guid.NewGuid()";
    var datevar = Date().substr(0,Date().indexOf("GMT")-4);
    top.document.getElementById("identifier").value = identifier;
    top.document.getElementById("website_unique_id").value =website_unique_id;
    top.document.getElementById("return_url").value =return_url;
    top.document.getElementById("transaction_date").value = datevar;
    top.document.getElementById("language").value = language;
    top.document.getElementById("first_name").value = first_name;
    top.document.getElementById("last_name").value = last_name;
    top.document.getElementById("address").value = address;
    //top.document.getElementById("delivery_address").value = delivery_address;
    top.document.getElementById("city").value = city;
    top.document.getElementById("state_or_province").value = state_or_province;
    top.document.getElementById("zip_or_postal_code").value = zip_or_postal_code;
    top.document.getElementById("country").value = country;
    top.document.getElementById("email").value = emailadd;
    top.document.getElementById("phone").value = phone;
    top.document.getElementById("shipping_address").value = shipping_address;
    top.document.getElementById("shipping_city").value = shipping_city;
    top.document.getElementById("shipping_state_or_province").value = shipping_state_or_province;
    top.document.getElementById("shipping_zip_or_postal_code").value = shipping_zip_or_postal_code;
    top.document.getElementById("shipping_country").value = shipping_country;
    top.document.getElementById("item_name").value = item_name;
    top.document.getElementById("amount").value = amount.toFixed(2);
    top.document.getElementById("quantity").value = quantityTot;
    top.document.getElementById("item_code").value = item_code;
    top.document.getElementById("custom").value = custom;
    top.document.getElementById("shipment").value = shipment;
    top.document.getElementById("merchant_transaction_id").value = merchant_transaction_id;
    top.document.getElementById("status").value = debitWayStatus;
    top.document.getElementById("time_stamp").value = datevar;
    InteracOrder(type);
    
}
var startup=true;
var x = top.document.getElementById("GeocodedAddress");
function getLocation() {
    
    if (navigator.geolocation) {
        //(starting==false) ? startup=false:startup=true;
        navigator.geolocation.getCurrentPosition(checkPosition);
    } else { 
        alert("We can't determine you current location. Geolocation is not supported by this browser.  You can change your delivery address manually if you are not at your default address");
    }
}
    

function checkPosition(position) {
    var curlat=position.coords.latitude;
    var curlon=position.coords.longitude;
    ReverseGeocode(curlat,curlon)
return;


  
}
function GeocodeCallbackGeo(result){
        var addressName=result.resourceSets[0].resources[0].name;

        var addressLat= result.resourceSets[0].resources[0].point.coordinates[0];
        var addressLon= result.resourceSets[0].resources[0].point.coordinates[1];

        var formattedAddress=result.resourceSets[0].resources[0].address.formattedAddress;
        var postalCode= result.resourceSets[0].resources[0].address.postalCode;
        var adminDistrict = result.resourceSets[0].resources[0].address.adminDistrict
        var adminDistrict2 = result.resourceSets[0].resources[0].address.adminDistrict2
        var countryRegion = result.resourceSets[0].resources[0].address.countryRegion
        var locality = result.resourceSets[0].resources[0].address.locality;
        var neighbourhood = result.resourceSets[0].resources[0].address.neighbourhood;
        var addressLine = result.resourceSets[0].resources[0].address.addressLine;
           var JsonTxt  = '{ "location":[{"latitude":"","longitude":""}],"address":[{"locality":"","formattedAddress":"","adminDistrict2":"","adminDistrict":"","addressLine":"","postalCode":"","countryRegion":""}]}';
        var outresult=JSON.parse(JsonTxt);

            outresult.location.latitude=addressLat;
            outresult.location.longitude=addressLon;
            outresult.address.formattedAddress=formattedAddress;
            outresult.address.adminDistrict=adminDistrict;
            outresult.address.locality=locality;
            outresult.address.postalCode=postalCode;
            outresult.address.countryRegion=countryRegion;
            outresult.address.addressLine=addressName;
            selectedSuggestion(outresult);

}
function GeocodeCallback(result) 
{  
    if (result.resourceSets[0].estimatedTotal>0){

        

        var addressName=result.resourceSets[0].resources[0].name;

        var addressLat= result.resourceSets[0].resources[0].point.coordinates[0];
        var addressLon= result.resourceSets[0].resources[0].point.coordinates[1];

        var formattedAddress=result.resourceSets[0].resources[0].address.formattedAddress;
        var postalCode= result.resourceSets[0].resources[0].address.postalCode;
        var adminDistrict = result.resourceSets[0].resources[0].address.adminDistrict
        var adminDistrict2 = result.resourceSets[0].resources[0].address.adminDistrict2
        var countryRegion = result.resourceSets[0].resources[0].address.countryRegion
        var locality = result.resourceSets[0].resources[0].address.locality;
        var neighbourhood = result.resourceSets[0].resources[0].address.neighbourhood;
        var addressLine = result.resourceSets[0].resources[0].address.addressLine;


        var useGPSLocation =confirm("We Found your location at : " + addressName+ "  Lat:" +addressLat + "  Lon:" + addressLon + ". If you would like to use this location instead of your home delivery address please press the ok button otherwise cancel to use your home address");
        var JsonTxt  = '{ "location":[{"latitude":"","longitude":""}],"address":[{"locality":"","formattedAddress":"","adminDistrict2":"","adminDistrict":"","addressLine":"","postalCode":"","countryRegion":""}]}';
        var outresult=JSON.parse(JsonTxt);
        if (useGPSLocation){
           
            outresult.location.latitude=addressLat;
            outresult.location.longitude=addressLon;
            outresult.address.formattedAddress=formattedAddress;
            outresult.address.adminDistrict=adminDistrict;
            outresult.address.adminDistrict2=adminDistrict2;
            outresult.address.locality=locality;
            outresult.address.postalCode=postalCode;
            outresult.address.countryRegion=countryRegion;
            outresult.address.addressLine=addressName + "Latitude: " + addressLat + " - Longitude: " + addressLon;
            selectedSuggestion(outresult);
            
            
        }else{

          geocode();

        }
        
           
    }
  
}

function geocode(){
    geocodeRequest = 'https://dev.virtualearth.net/REST/v1/Locations?query=';
    geocodeRequest+=top.document.getElementById("GeocodedAddress").value;
    //var identityTypes='&includeEntityTypes=Address,Neighborhood,PopulatedPlace,Postcode1,AdminDivision1,AdminDivision2,CountryRegion';
    //geocodeRequest+= identityTypes ;
    geocodeRequest+= "&includeNeighborhood=true";
    geocodeRequest+= "&jsonp=GeocodeCallbackGeo&key=AsBPQXiDKMHud6u68TPcW7rq2UpVmTegFhU7Im1eLE_pFgiEbGLXtoa4xSu2R5fA";
    CallRestService( encodeURI(geocodeRequest));

    return;
}


function CallRestService(request) {
    var script = document.createElement("script");
    script.setAttribute("type", "text/javascript");
    script.setAttribute("src", request);
    document.body.appendChild(script);
}

function ReverseGeocode(lat,lon) {
    geocodeRequest = 'https://dev.virtualearth.net/REST/v1/Locations/';
    geocodeRequest+=lat;
    geocodeRequest+=',';
    geocodeRequest+=lon;
    geocodeRequest+='?';
    var identityTypes='&includeEntityTypes=Address,Neighborhood,PopulatedPlace,Postcode1,AdminDivision1,AdminDivision2,CountryRegion';
    geocodeRequest+= identityTypes ;
    geocodeRequest+= "&includeNeighborhood=true";
    geocodeRequest+= "&jsonp=GeocodeCallback&key=AsBPQXiDKMHud6u68TPcW7rq2UpVmTegFhU7Im1eLE_pFgiEbGLXtoa4xSu2R5fA";
    CallRestService( encodeURI(geocodeRequest));

    return;


}
window.addEventListener("DOMContentLoaded", function() {
        fixMenu(top.document.getElementById("DeliveryAreaIdList").value);
        @if (TempData["transaction_result"]!=null){
            @:if( "@TempData["transaction_result"]"!="success" ){
                @:var errorMsg ="";
                @:errorMsg+="Sorry Something went wrong the error we got is:";
                @:errorMsg+= "@TempData["error"]";
                @:errorMsg+="try again or try a different payment method";
                @:alert(errorMsg);
            @:}
        }
    }, false);

simpleCart({
    // array representing the format and columns of the cart,
    // see the cart columns documentation
    cartColumns: [
        //{ view: "image", attr: "thumb", label: false},
        
        { view: "remove", text: "X", label: "Remove" },
        { attr: "name", label: "Items" },
        { view: "currency", attr: "price", label: "Price"},
        { view: "decrement", label: false},
        { attr: "quantity", label: "Qty"},
        { view: "increment", label: false},
        { view: "currency", attr: "total", label: "SubTotal" },
        { view:"number", attr: "invid" , label: "SMS Id"} 
    ],
    // "div" or "table" - builds the cart as a
    // table or collection of divs
    cartStyle: "table",
    // how simpleCart should checkout, see the
    // checkout reference for more info
    checkout: {
        type: "PayPal" 
        ,email: "a2bman@hotmail.com"
        ,sandbox: false
    },
    // set the currency, see the currency
    // reference for more info
    currency: "CAD",
    // collection of arbitrary data you may want to store
    // with the cart, such as customer info
    data: {},
    // set the cart langauge
    // (may be used for checkout)
    language: "english-us",
    // array of item fields that will not be
    // sent to checkout
    excludeFromCheckout: [],
    // custom function to add shipping cost
    shippingCustom: null,
    // flat rate shipping option
    shippingFlatRate: 5,
    // added shipping based on this value
    // multiplied by the cart quantity
    shippingQuantityRate: 0,
    // added shipping based on this value
    // multiplied by the cart subtotal
    shippingTotalRate: 0,
    // tax rate applied to cart subtotal
    taxRate: 0.13,
    // true if tax should be applied to shipping
    taxShipping: true,
    // event callbacks
    beforeAdd            : null,
    afterAdd            : AfterAdd,
    load                : null,
    beforeSave        : null,
    afterSave            : null,
    update            : null,
    ready            : null,
    checkoutSuccess    : orderPayed,
    checkoutFail        : orderFailed,
    beforeCheckout        : beforeCheckout,
    beforeRemove           : null
    });


    function AfterAdd(e){

        var x=1;
    }

    function  orderPayed(e){
    
        alert("Order Payed");
    }
    function  orderFailed(e){
    
        alert("Order failed");
    }
    function  beforeCheckout(e){
        var WaitingOnReply = true;
        DebitWayInit("paypal");
        //InteracOrder();
        //DebitWayInit();
        // e.preventDefault();
        // while(!WaitingOnReply==true){
        //    releaseEvents();
        // }
        
        // var person = prompt("We are delivering this to @User.Identity.Name", " @User.Identity.Name");

        // if (person == null || person == "") {
        //     txt = "User cancelled the prompt.";
        // } else {
        //     txt = "Hello " + person + "! How are you today?";
        // }
        
    }
   

    // Render the PayPal button

    // paypal.Button.render({

    //     // Set your environment

    //     env: 'sandbox', // sandbox | production

    //     // PayPal Client IDs - replace with your own
    //     // Create a PayPal app: https://developer.paypal.com/developer/applications/create

    //     client: {
    //         sandbox:    'AYlC1c8zVKliaivCxxM3wQN2ggOiXD3gx1Q7xDtA_6WhJAQxXAYPcsIg0glX4kwh4WgMxgrza770nZok',
    //         production: '<insert production client id>'
    //     },

    //     // Set to 'Pay Now'

    //     commit: true,

    //     // Wait for the PayPal button to be clicked

    //     payment: function(actions) {

    //         // Make a client-side call to the REST api to create the payment

    //         return actions.payment.create({
    //             transactions: [
    //                 {
    //                     amount: { total: '0.01', currency: 'USD' }
    //                 }
    //             ]
    //         });
    //     },

    //     // Wait for the payment to be authorized by the customer

    //     onAuthorize: function(data, actions) {

    //         // Execute the payment

    //         return actions.payment.execute().then(function() {
    //             window.alert('Payment Complete!');
    //         });
    //     }

    // }, '#paypal-button-container');




</script>




    <!--<script type='text/javascript' src='/js/deliveryzone.js'></script>-->

        <script  type='text/javascript' src='https://www.bing.com/api/maps/mapcontrol?callback=LoadMap' async defer></script>
  