
@model Core.Models.ApplicationUser
@{
    ViewData["Title"] = "Update User Profile";
}


<p class="text-success">@ViewData["StatusMessage"]</p>


<div><h3>@ViewData["Title"].</h3>
    <h4>Change your account settings</h4>
    <hr />


<form asp-controller="Manage" asp-action="UpdateUser" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" class="form-horizontal">
    <h4>If you have been automatically redirected here you don't have all of your information setup in your profile.  You must have a confirmed email address, 
        confirmed phone number, and a valid Delivery Address.</h4>
    <hr />
  <input type="hidden" asp-for="Id" />
    <div class="form-group">
        <label asp-for="DeliveryAddress" class="col-md-2 control-label"></label>
        <div class="col-md-10">
           <div id='searchBoxContainer'> 
               <input id='DeliveryAddress' name="DeliveryAddress"  type=text  asp-for="DeliveryAddress" class="form-control" />
           </div>This address will be varified against our delivery zone
            <span asp-validation-for="DeliveryAddress" class="text-danger"></span>
        </div>
    </div>
        <div class="form-group">
            <input type="hidden"  id="DeliveryAreaId" name="DeliveryAreaId"  asp-for="DeliveryAreaId" class="form-control" ></input>
    </div>
     <div class="form-group">
        <label  class="col-md-2 control-label">Your Delivery Area</label>
        <div class="col-md-10">
            <select  id="DeliveryAreaIdList" name="DeliveryAreaIdList"  asp-items=ViewBag.deliveryAreasForSelect  asp-for="DeliveryAreaId" disabled  class="form-control" ></select>
         </div>
    </div>

    <div class="form-group">
        <label asp-for="FirstName" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input  id="FirstName" name="FirstName"  asp-for="FirstName" class="form-control" />
            <span asp-validation-for="FirstName" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group">
        <label asp-for="LastName" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input  id="LastName" name="LastName"  asp-for="LastName" class="form-control" />
            <span asp-validation-for="LastName" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group">
        <label asp-for="StreetNumber" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input  id="StreetNumber" name="StreetNumber"  asp-for="StreetNumber" class="form-control" />
            <span asp-validation-for="StreetNumber" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group">
        <label asp-for="StreetName" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input  id="StreetName" name="StreetName"  asp-for="StreetName" class="form-control" />
            <span asp-validation-for="StreetName" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group">
        <label asp-for="PostalCode" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input  id="PostalCode" name="PostalCode"  asp-for="PostalCode" class="form-control" />
            <span asp-validation-for="PostalCode" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group">
        <label asp-for="City" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input id="City" name="City" asp-for="City" class="form-control" />
            <span asp-validation-for="City" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group">
        <label asp-for="Province" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input  id="Province" name="Province"  asp-for="Province" class="form-control" />
            <span asp-validation-for="Province" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group">
        <label asp-for="Country" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input  id="Country" name="Country" asp-for="Country" class="form-control" />
            <span asp-validation-for="Country" class="text-danger"></span>
        </div>
    </div>

    <div class="form-group">
        <label asp-for="DoB" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input asp-for="DoB" class="form-control" class="form-control datepicker"/>
            <span id="DoB" name="DoB" asp-validation-for="DoB" class="text-danger"></span>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <button type="submit" class="btn btn-default">Update</button>
        </div>
    </div>
</form>
@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}
    <script  type='text/javascript' src='https://www.bing.com/api/maps/mapcontrol?callback=LoadMap' async defer></script>
    <!--<script type='text/javascript' src='/js/deliveryzone.js'></script>-->





  <script>
   $( "#DoB" ).on('click', function() {
    $( "#DoB" ).datepicker();
  } );
  </script>









<script>

 function LoadMap() {
        Microsoft.Maps.loadModule('Microsoft.Maps.AutoSuggest', {
            callback: function () {
                var manager = new Microsoft.Maps.AutosuggestManager({
                    placeSuggestions: false
                });
                manager.attachAutosuggest('#DeliveryAddress', '#searchBoxContainer', selectedSuggestion);
            },
            errorCallback: function(msg){
                alert(msg);
            },
            credentials: 'AsBPQXiDKMHud6u68TPcW7rq2UpVmTegFhU7Im1eLE_pFgiEbGLXtoa4xSu2R5fA' 
        });
        getLocation();
    }
 


function selectedSuggestion(result) {
        //Populate the address textbox values.
        if (top.document.getElementById('StreetName')!=null){
            top.document.getElementById('StreetName').value = result.address.addressLine;
            top.document.getElementById('City').value = result.address.locality;
            top.document.getElementById('Province').value = result.address.adminDistrict;
            top.document.getElementById('PostalCode').value = result.address.postalCode;
            top.document.getElementById('Country').value = result.address.countryRegion;
          
        }
        var exteriorRing;
        var InDeliveryArea=false;
        var  AreaOpen=0;
        var InDeliveryAreaConfirmed=false;
        @foreach (var item in ViewBag.deliveryareas){
 
                @:exteriorRing = [
                    @:@item.Points
                @:];
            @: polygon@(item.ID) = new Microsoft.Maps.Polygon(exteriorRing, {
            @:fillColor: 'rgba(0, 255, 0, 0.5)',
            @:strokeColor: 'red',
            @:strokeThickness: 2
            @:});

            @:var points@(item.ID) = polygon@(item.ID).getLocations();
            @:InDeliveryArea =  pointInPolygon(points@(item.ID),result.location.latitude,result.location.longitude) 
            @:if (InDeliveryArea==true){
            @:    InDeliveryAreaConfirmed=true; 
            @:    var DeliveryAreaId = @item.ID
            @:    AreaOpen=@(item.Status)  
            @:        var openTime = new Date(Date.parse('@item.OpenTime'));
            @:        var closedTime = new Date(Date.parse('@item.ClosedTime'));
            
            @:        var openStr = openTime.getHours() + ":" + openTime.getMinutes();
            @:        var closeStr = closedTime.getHours() + ":" + closedTime.getMinutes();
            @:        var status = @item.Status ;
            @:        var open = @item.Open.ToString().ToLower();
             @foreach (var partner in ViewBag.partners){
               @if (partner.DeliveryArea == item.ID){
                   @if (partner.Status ==2){
                        @: var partnerId = @partner.Id;
                        @: top.document.getElementById('DeliveryAreaId').value = @item.ID;
                         @: top.document.getElementById('DeliveryAreaIdList').value = @item.ID;
                        @: var areaSMS = @partner.SMSNumber;
                   }else{
                       @: var partnerId = @partner.Id;
                       @: top.document.getElementById('DeliveryAreaId').value = @item.ID;
                        @: top.document.getElementById('DeliveryAreaIdList').value = @item.ID;
                       
                       var d=0;
                       @foreach (var driver in ViewBag.drivers){
                            @if(driver.PartnerId==partner.Id){
                              d+=1;
                        @:    var DriverId@(d) = @driver.ID;
                        @:    var SMS@(d) = @driver.PhoneNumber;
                            }
                       }
                   }
                }
             }
            @:}
        }
   

            InDeliveryAreaConfirmed ? message="Your all set! This address qualifies for immediate delivery between " + openStr + " and " + closeStr : message="Sorry this address does not qualify for immediate delivery, your items will be mailed. Please add your email and submit the form behind this message and we will notify you when the area opens "
            InDeliveryAreaConfirmed ? title="Dispatched Delivery" : title="Postal Delivery"
           if (AreaOpen==2){  
               message = "Your area will be open very soon. Please add your email and submit the form behind this message and we will notify you when the area opens.";
           }
   
            var myAnswer = alert(title + " - " + message);
           // if (myAnswer){
           //     top.document.getElementById("GeocodedAddress").value=""
           // }else{
           //     top.document.getElementById("GeocodedAddress").value=""
           // }
            InDeliveryAreaConfirmed=false;
            AreaOpen=0;
    }


function pointInPolygon(points,lat,lon) 
{
  var i;
  var j=points.length-1;
  var inPoly=false;

  for (i=0; i<points.length; i++) 
  {
    if (points[i].longitude<lon && points[j].longitude>=lon 
      || points[j].longitude<lon && points[i].longitude>=lon) 
    {
      if (points[i].latitude+(lon-points[i].longitude)/ 
        (points[j].longitude-points[i].longitude)*(points[j].latitude 
          -points[i].latitude)<lat) 
      {
        inPoly=!inPoly; 
      }
    }
    j=i; 
  }
  return inPoly; 
}

function checkPosition(position) {
    var curlat=position.coords.latitude;
    var curlon=position.coords.longitude;
    ReverseGeocode(curlat,curlon)
return;

}

function getLocation() {
    
    if (navigator.geolocation) {
        //(starting==false) ? startup=false:startup=true;
        navigator.geolocation.getCurrentPosition(checkPosition);
    } else { 
        alert("We can't determine you current location. Geolocation is not supported by this browser.  You can change your delivery address manually and we will try and find you");
    }
} 

function GeocodeCallback(result) 
{  
    if (result.resourceSets[0].estimatedTotal>0){

        

        var addressName=result.resourceSets[0].resources[0].name;

        var addressLat= result.resourceSets[0].resources[0].point.coordinates[0];
        var addressLon= result.resourceSets[0].resources[0].point.coordinates[1];

        var formattedAddress=result.resourceSets[0].resources[0].address.formattedAddress;
        var postalCode= result.resourceSets[0].resources[0].address.postalCode;
        var adminDistrict = result.resourceSets[0].resources[0].address.adminDistrict
        var adminDistrict2 = result.resourceSets[0].resources[0].address.adminDistrict2
        var countryRegion = result.resourceSets[0].resources[0].address.countryRegion
        var locality = result.resourceSets[0].resources[0].address.locality;
        var neighbourhood = result.resourceSets[0].resources[0].address.neighbourhood;
        var addressLine = result.resourceSets[0].resources[0].address.addressLine;
        
        
        
        
        
 
 
var myAnswer =confirm("We Found your location at : " + addressName+ "  Lat:" +addressLat + "  Lon:" + addressLon + ". Would you like us to fillout the form based on this location?");
                if (myAnswer){
                    var JsonTxt  = '{ "location":[{"latitude":"","longitude":""}],"address":[{"locality":"","formattedAddress":"","adminDistrict2":"","adminDistrict":"","addressLine":"","postalCode":"","countryRegion":""}]}';
                    outresult=JSON.parse(JsonTxt);
                    outresult.location.latitude=addressLat;
                    outresult.location.longitude=addressLon;
                    outresult.address.formattedAddress=formattedAddress;
                    outresult.address.adminDistrict=adminDistrict;
                    outresult.address.adminDistrict2=adminDistrict2;
                    outresult.address.locality=locality;
                    outresult.address.postalCode=postalCode;
                    outresult.address.countryRegion=countryRegion;
                    outresult.address.addressLine=addressName + "Latitude: " + addressLat + " - Longitude: " + addressLon;

                    selectedSuggestion(outresult);
                  
                }

            
    }
  
}

function CallRestService(request) {
    var script = document.createElement("script");
    script.setAttribute("type", "text/javascript");
    script.setAttribute("src", request);
    document.body.appendChild(script);
}

function ReverseGeocode(lat,lon) {
    geocodeRequest = 'https://dev.virtualearth.net/REST/v1/Locations/';
    geocodeRequest+=lat;
    geocodeRequest+=',';
    geocodeRequest+=lon;
    geocodeRequest+='?';
    var identityTypes='&includeEntityTypes=Address,Neighborhood,PopulatedPlace,Postcode1,AdminDivision1,AdminDivision2,CountryRegion';
    geocodeRequest+= identityTypes ;
    geocodeRequest+= "&includeNeighborhood=true";
    geocodeRequest+= "&jsonp=GeocodeCallback" 
    //geocodeRequest += + ""
    geocodeRequest += "&key=AsBPQXiDKMHud6u68TPcW7rq2UpVmTegFhU7Im1eLE_pFgiEbGLXtoa4xSu2R5fA";
    CallRestService( encodeURI(geocodeRequest));

    return;


}

</script>
