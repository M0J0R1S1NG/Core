
@model Core.Models.ApplicationUser
@{
    ViewData["Title"] = "Update User Profile";
}


<p class="text-success">@ViewData["StatusMessage"]</p>


<div><h3>@ViewData["Title"].</h3>
    <h4>Change your account settings</h4>
    <hr />


<form asp-controller="Manage" asp-action="UpdateUser" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" class="form-horizontal">
    <h4>If you have been automatically redirected here you don't have all of your information setup in your profile.  You must have a confirmed email address, 
        confirmed phone number, and a valid Delivery Address.</h4>
    <hr />
  <input type="hidden" asp-for="Id" />
    <div class="form-group">
        <label asp-for="DeliveryAddress" class="col-md-2 control-label"></label>
        <div class="col-md-10">
           <div id='searchBoxContainer'> 
               <input id='DeliveryAddress' type=text  asp-for="DeliveryAddress" class="form-control" />
           </div>This address will be varified against our delivery zone
            <span asp-validation-for="DeliveryAddress" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group">
        <label asp-for="FirstName" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input asp-for="FirstName" class="form-control" />
            <span asp-validation-for="FirstName" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group">
        <label asp-for="LastName" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input asp-for="LastName" class="form-control" />
            <span asp-validation-for="LastName" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group">
        <label asp-for="StreetNumber" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input asp-for="StreetNumber" class="form-control" />
            <span asp-validation-for="StreetNumber" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group">
        <label asp-for="StreetName" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input asp-for="StreetName" class="form-control" />
            <span asp-validation-for="StreetName" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group">
        <label asp-for="PostalCode" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input asp-for="PostalCode" class="form-control" />
            <span asp-validation-for="PostalCode" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group">
        <label asp-for="City" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input asp-for="City" class="form-control" />
            <span asp-validation-for="City" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group">
        <label asp-for="Province" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input asp-for="Province" class="form-control" />
            <span asp-validation-for="Province" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group">
        <label asp-for="Country" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input asp-for="Country" class="form-control" />
            <span asp-validation-for="Country" class="text-danger"></span>
        </div>
    </div>

    <div class="form-group">
        <label asp-for="DoB" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input asp-for="DoB" class="form-control" class="form-control datepicker"/>
            <span asp-validation-for="DoB" class="text-danger"></span>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <button type="submit" class="btn btn-default">Update</button>
        </div>
    </div>
</form>
@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}
    <script  type='text/javascript' src='https://www.bing.com/api/maps/mapcontrol?callback=LoadMap' async defer></script>
    <!--<script type='text/javascript' src='/js/deliveryzone.js'></script>-->





  <script>
   $( "#DoB" ).on('click', function() {
    $( "#DoB" ).datepicker();
  } );
  </script>









<script>

 function LoadMap() {
        Microsoft.Maps.loadModule('Microsoft.Maps.AutoSuggest', {
            callback: function () {
                var manager = new Microsoft.Maps.AutosuggestManager({
                    placeSuggestions: false
                });
                manager.attachAutosuggest('#DeliveryAddress', '#searchBoxContainer', selectedSuggestion);
            },
            errorCallback: function(msg){
                alert(msg);
            },
            credentials: 'AsBPQXiDKMHud6u68TPcW7rq2UpVmTegFhU7Im1eLE_pFgiEbGLXtoa4xSu2R5fA' 
        });
    }
 
 var defaultRangeValidator = $.validator.methods.range;
    $.validator.methods.range = function(value, element, param) {
        if(element.type === 'checkbox') {
            // if it's a checkbox return true if it is checked
            return element.checked;
        } else {
            // otherwise run the default validation function
            return defaultRangeValidator.call(this, value, element, param);
        }
    }

function selectedSuggestion(result) {
        //Populate the address textbox values.
        if (top.document.getElementById('StreetName')!=null){
            top.document.getElementById('StreetName').value = result.address.addressLine;
            top.document.getElementById('City').value = result.address.locality;
            top.document.getElementById('Province').value = result.address.adminDistrict;
            top.document.getElementById('PostalCode').value = result.address.postalCode;
            top.document.getElementById('Country').value = result.address.countryRegion;
        }
        var exteriorRing;
        var InDeliveryArea=false;
        var  AreaOpen=0;
        var InDeliveryAreaConfirmed=false;
        @foreach (var item in ViewBag.deliveryareas){
 
                @:exteriorRing = [
                    @:@item.Points
                @:];
            @: polygon@(item.ID) = new Microsoft.Maps.Polygon(exteriorRing, {
            @:fillColor: 'rgba(0, 255, 0, 0.5)',
            @:strokeColor: 'red',
            @:strokeThickness: 2
            @:});

            @:var points@(item.ID) = polygon@(item.ID).getLocations();
            @:InDeliveryArea =  pointInPolygon(points@(item.ID),result.location.latitude,result.location.longitude) 
            @:if (InDeliveryArea==true){
            @:    InDeliveryAreaConfirmed=true; 
            @:    AreaOpen=@(item.Status)  
            @:        var openTime = new Date(Date.parse('@item.OpenTime'));
            @:        var closedTime = new Date(Date.parse('@item.ClosedTime'));
            
            @:        var openStr = openTime.getHours() + ":" + openTime.getMinutes();
            @:        var closeStr = closedTime.getHours() + ":" + closedTime.getMinutes();
            @:        var status = @item.Status ;
            @:        var open = @item.Open.ToString().ToLower();
         
            @:}
        }
   

            InDeliveryAreaConfirmed ? message="Your all set! This address qualifies for immediate delivery between " + openStr + " and " + closeStr : message="Sorry this address does not qualify for immediate delivery, your items will be mailed. Please add your email and submit the form behind this message and we will notify you when the area opens "
            InDeliveryAreaConfirmed ? title="Dispatched Delivery" : title="Postal Delivery"
           if (AreaOpen==2){  
               message = "Your area will be open very soon. Please add your email and submit the form behind this message and we will notify you when the area opens.";
           }
   
            var myAnswer = alert(title + " - " + message);
            if (myAnswer){
                top.document.getElementById("GeocodedAddress").value=""
            }else{
                top.document.getElementById("GeocodedAddress").value=""
            }
            InDeliveryAreaConfirmed=false;
            AreaOpen=0;
    }


function pointInPolygon(points,lat,lon) 
{
  var i;
  var j=points.length-1;
  var inPoly=false;

  for (i=0; i<points.length; i++) 
  {
    if (points[i].longitude<lon && points[j].longitude>=lon 
      || points[j].longitude<lon && points[i].longitude>=lon) 
    {
      if (points[i].latitude+(lon-points[i].longitude)/ 
        (points[j].longitude-points[i].longitude)*(points[j].latitude 
          -points[i].latitude)<lat) 
      {
        inPoly=!inPoly; 
      }
    }
    j=i; 
  }
  return inPoly; 
}



</script>
